use std::env;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;

fn main() {
    // Get the output directory
    let include_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join("include");

    // Create the output file path
    let dest_path = include_dir.join("lvgl_configuration.generated.h");
    // Delete existing file if any
    if dest_path.exists() {
        std::fs::remove_file(&dest_path)
            .expect("Failed to remove existing lvgl_configuration.generated.h");
    }
    // Determine color depth based on features
    let color_depth = if cfg!(feature = "rendering_rgb565") {
        16
    } else if cfg!(feature = "rendering_xrgb8888") {
        32
    } else {
        return;
    };

    // Generate the header file content
    let header_content = format!(
        r#"/* Auto-generated by build.rs - DO NOT EDIT MANUALLY */
#ifndef __LVGL_CONFIGURATION_GENERATED_H
#define __LVGL_CONFIGURATION_GENERATED_H

#define LV_COLOR_DEPTH {}

#endif /* LVGL_CONFIGURATION_GENERATED_H */
"#,
        color_depth
    );

    // Write to the file
    let mut file =
        File::create(&dest_path).expect("Failed to create lvgl_configuration.generated.h");
    file.write_all(header_content.as_bytes())
        .expect("Failed to write to lvgl_configuration.generated.h");

    // Tell Cargo to rerun this build script if any of these change
    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=Cargo.toml");

    // Output the include directory for the C compiler
    println!("cargo:include={}", include_dir.display());
}
